name: CD 실행

on: 
  push:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:

    # repository checkout
    - name: Checkout
      uses: actions/checkout@v4

    # JDK 환경 설치
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'corretto' # AWS 최적화 배포판

    # 환경 변수 설정
    - name: application.yml파일 설정 
      run: |
        mkdir -p src/main/resources # 디렉토리 생성(이미 존재해도 괜찮음)
        echo "${{ secrets.APPLICATION_YML }}" > ./src/main/resources/application.yml

    # Gradle 환경 설치
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

    # Gradle 권한 변경
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    # Build 진행
    - name: Build with Gradle
      run: ./gradlew clean build -x test --stacktrace
      shell: bash
    
    # docker build & push to production
    - name: Docker build & push
      run: |
        docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
        docker build -t ${{ secrets.DOCKER_USERNAME }}/juksoon -f ./Dockerfile .
        docker push ${{ secrets.DOCKER_USERNAME }}/juksoon:latest
    
    # deploy to production
    - name: EC2 Connect & Deploy
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SERVER_IP }}
        username: ${{ secrets.SSH_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script_stop: true
        script: |
          # spring 컨테이너 중지 및 제거 (컨테이너가 있는 경우)
          CONTAINERS=$(docker ps -a -q --filter "name=juksoon") || true
          if [ -n "$CONTAINERS" ]; then
            sudo docker stop $CONTAINERS || true
            sudo docker rm -fv $CONTAINERS || true
          fi

          # docker-compose 파일 실행
          sudo docker-compose up -d

          # 불필요한 Docker 이미지 정리
          sudo docker image prune -f
          
